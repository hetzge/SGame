package de.hetzge.sgame.network;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;

import org.nustaq.serialization.FSTObjectInput;
import org.nustaq.serialization.FSTObjectOutput;

import de.hetzge.sgame.common.Log;
import de.hetzge.sgame.common.exception.DefaultUncaughtExceptionHandler;
import de.hetzge.sgame.common.exception.NetworkException;

public class Client {

	private Socket socket;

	public Client() {
	}

	public void connect(NetworkData networkData, Object registerMessage) {
		try (Socket socket = new Socket(networkData.ipAddress, networkData.port)) {

			this.socket = socket;

			Log.NETWORK.info("Client connected");

			this.write(socket.getOutputStream(), new Object());

			Log.NETWORK.info("Client created output");

			// InputStream inputStream = socket.getInputStream();
			// FSTObjectInput objectInput =
			// NetworkConfig.FST.getObjectInput(inputStream);

			Log.NETWORK.info("Client created input");

			this.write(socket.getOutputStream(), registerMessage);

			Log.NETWORK.info("Client wrote register object");

			Object registerAnswer = this.read(socket.getInputStream());
			NetworkConfig.CLIENT_LIFECYCLE.onClientRegisterSuccess(registerAnswer);

			Log.NETWORK.info("Client handled register answer");

			Thread acceptMessageThread = new Thread(() -> {
				while (true) {
					try {
						Object message = this.read(socket.getInputStream());
						NetworkConfig.CLIENT_LIFECYCLE.handleMessage(message);
					} catch (Exception e) {
						throw new NetworkException(e);
					}
				}
			});
			Thread.setDefaultUncaughtExceptionHandler(DefaultUncaughtExceptionHandler.INSTANCE);
			acceptMessageThread.start();

			Log.NETWORK.info("Client message receive thread startet");

		} catch (IOException | ClassNotFoundException e) {
			throw new NetworkException(e);
		}
	}

	public Object read(InputStream stream) throws IOException, ClassNotFoundException {
		FSTObjectInput in = new FSTObjectInput(stream);
		Object result = in.readObject();
		in.resetForReuse(stream);
		return result;
	}

	public void write(OutputStream stream, Object toWrite) throws IOException {
		System.out.println("write c");
		FSTObjectOutput out = new FSTObjectOutput(stream);
		out.writeObject(toWrite);
		out.flush();
	}

	public void sendMessage(Object message) {
		if (this.socket == null)
			throw new IllegalStateException();

		this.write(this.socket.getOutputStream(), message);

	}
}
